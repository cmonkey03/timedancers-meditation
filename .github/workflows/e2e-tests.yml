name: E2E Tests

on:
  push:
    branches: [ develop ]
  workflow_dispatch: # Allow manual triggering

jobs:
  e2e-tests:
    runs-on: macos-14 # Use latest macOS for iOS simulator
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.4' # Match the required Node version for React Native
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Setup Expo CLI
        run: npm install -g @expo/cli@latest

      - name: Setup Detox CLI
        run: npm install -g detox-cli

      - name: Setup iOS Simulator
        run: |
          # Install iOS 18.4 runtime if not available
          xcrun simctl list runtimes | grep "iOS 18.4" || {
            echo "iOS 18.4 runtime not found, installing..."
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
            xcodebuild -downloadPlatform iOS
          }
          
          # Create iPhone 16 simulator if it doesn't exist
          DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 16" | grep "iOS 18.4" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
          if [ -z "$DEVICE_ID" ]; then
            echo "Creating iPhone 16 simulator..."
            xcrun simctl create "iPhone 16" "iPhone 16" "iOS18.4"
          fi
          
          # Boot the simulator
          DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 16" | grep "iOS 18.4" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
          echo "Booting simulator: $DEVICE_ID"
          xcrun simctl boot "$DEVICE_ID" || true
          
          # Wait for simulator to boot
          echo "Waiting for simulator to boot..."
          xcrun simctl bootstatus "$DEVICE_ID" -b

      - name: Cache iOS build
        uses: actions/cache@v4
        with:
          path: |
            ios/build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-ios-build-${{ hashFiles('ios/**/*', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-ios-build-

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install --repo-update

      - name: Run Unit Tests
        run: npm test

      - name: Build iOS app for testing
        run: npm run detox:build
        env:
          RCT_NO_LAUNCH_PACKAGER: 1

      - name: Run E2E Tests
        run: npm run e2e -- --skip-unit --verbose
        env:
          DETOX_CONFIGURATION: ios.debug

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-artifacts
          path: e2e/artifacts/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            e2e/artifacts/
            coverage/
          retention-days: 7

  test-summary:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    steps:
      - name: Test Summary
        run: |
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ All E2E tests passed!"
            echo "The TimeDancers Meditation app is ready for deployment."
          else
            echo "❌ E2E tests failed"
            echo "Please check the test artifacts for details."
            exit 1
          fi
